scalar Date
scalar ID

type Query {
  currentUser: User
  upload(input: UploadInput): Upload!
}

type Mutation {
  getUploadTokens(input: UploadTokenInput!): UploadTokenMutationPayload!
  saveUploadData(input: UploadInput!): UploadMutationPayload!
  login(input: LoginInput!): LoginMutationPayload!
  logout: LogoutMutationPayload!
  register(input: RegisterInput!): LoginMutationPayload!
  saveFoodLog(input: SaveFoodLogInput!): FoodLogConnection!
  deleteFoodLog(input: DeleteFoodLogInput!): FoodLogConnection!
  saveFood(input: FoodInput!): FoodMutationPayload!
  deleteFoodMeasurement(input: FoodMeasurementInput!): FoodMutationPayload!
}

#################
# Enums         #
#################

enum UploadEntityType {
  FOOD_IMAGE
}

enum UploadUrlType {
  "384x384"
  MEDIUM_SQUARE
  "width: 64x64"
  SMALL
  "width: 24x24"
  PREVIEW
}

#################
# Inputs        #
#################

input FoodMeasurementInput {
  id: String!
}

input UploadInput {
  id: String
  publicId: String
  entityId: String
  entityType: UploadEntityType
  extension: String
}

input UploadTokenInput {
  count: Int!
}

input LoginInput {
  username: String!
  password: String!
}

input RegisterInput {
  username: String!
  password: String!
  passwordConfirmation: String!
}

input FoodLogConnectionInput {
  before: String
  after: String
  first: Int
  last: Int
  day: String
}

input SaveFoodLogInput {
  day: String!
  foodLogs: [FoodLogInput!]!
}

input FoodLogInput {
  id: ID
  description: String!
  calories: Int
  fat: Int
  carbs: Int
  protein: Int
}

input DeleteFoodLogInput {
  id: ID!
}

input FoodInput {
  id: ID
  name: String
  description: String
  imageUploadId: String
  measurements: [MeasurementInput!]
}

input MeasurementInput {
  id: ID
  measurement: String
  amount: Int
  calories: Int
  fat: Int
  carbs: Int
  protein: Int
}

input FoodQueryInput {
  before: String
  after: String
  first: Int
  last: Int
  filter: FoodQueryFilters
}

input FoodQueryFilters {
  id: ID
  searchString: String
}

input UploadUrlInput {
  type: UploadUrlType!
}

#################
# Types         #
#################

type Upload {
  id: ID!
  publicId: String!
  entity: String!
  entityType: UploadEntityType!
  publicUrl(input: UploadUrlInput): String!
}

type UploadMutationPayload {
  upload: Upload!
}

type UploadTokenMutationPayload {
  tokens: [UploadTokenPayload!]!
  errors: [String!]!
}

type UploadTokenPayload {
  uploadId: String!
  postUrl: String!
  signature: String!
  publicId: String!
  apiKey: String!
  timestamp: String!
  folder: String!
}

type FoodMeasurementConnection {
  pageInfo: PageInfo!
  edges: [FoodMeasurementEdge!]!
}

type FoodMeasurementEdge {
  cursor: String!
  node: FoodMeasurement!
}

type FoodConnection {
  pageInfo: PageInfo!
  edges: [FoodEdge!]!
}

type FoodEdge {
  cursor: String!
  node: Food!
}

type FoodMutationPayload {
  errors: [String!]
  food: Food
}

type LogoutMutationPayload {
  expiredTokens: [String!]!
}

type LoginMutationPayload {
  token: String!
  rememberToken: String!
}

type User {
  id: ID!
  preferredName: String!
  foodLog(day: String!): FoodLogConnection!
  foods(input: FoodQueryInput): FoodConnection!
}

type FoodLogConnection {
  day: ID!
  pageInfo: PageInfo!
  edges: [FoodLogEdge!]!
}

type FoodLogEdge {
  cursor: String!
  node: FoodLog!
}

type FoodLog {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  description: String!
  calories: Int
  fat: Int
  carbs: Int
  protein: Int
  food: Food
}

type PageInfo {
  totalCount: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Food {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  description: String
  measurements: FoodMeasurementConnection!
  image: Upload
}

type FoodMeasurement {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  measurement: String!
  amount: Int!
  calories: Int!
  fat: Int!
  carbs: Int!
  protein: Int!
}
