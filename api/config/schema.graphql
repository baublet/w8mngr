type Query {
  currentUser: User
}

type Mutation {
  login(input: LoginInput!): LoginMutationPayload!
  register(input: RegisterInput!): LoginMutationPayload!
}

#################
# Inputs        #
#################

input LoginInput {
  username: String!
  password: String!
}

input RegisterInput {
  username: String!
  password: String!
  passwordConfirmation: String!
}

#################
# Types         #
#################

type LoginMutationPayload {
  token: String!
  rememberToken: String!
}

type FoodEntry {
  id: ID!
  description: String
  calories: Int
  fat: Int
  carbs: Int
  protein: Int
  day: Int!
  userId: Float!
  createdAt: Float!
  updatedAt: Float!
}

type FoodEntryConnection {
  pageInfo: Int
  nodes: [FoodEntry]
}

type FoodLog {
  day: Int!
  calories: Int!
  fat: Int!
  carbs: Int!
  protein: Int!
  entries: FoodEntryConnection!
}

type User {
  id: ID!
  preferredName: String!
}

type PageInfo {
  totalCount: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}
