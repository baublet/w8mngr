scalar Date
scalar ID

type Query {
  currentUser: User
}

type Mutation {
  login(input: LoginInput!): LoginMutationPayload!
  logout: LogoutMutationPayload!
  register(input: RegisterInput!): LoginMutationPayload!
  saveFoodLog(input: SaveFoodLogInput!): FoodLogConnection!
  deleteFoodLog(input: DeleteFoodLogInput!): FoodLogConnection!
}

#################
# Inputs        #
#################

input LoginInput {
  username: String!
  password: String!
}

input RegisterInput {
  username: String!
  password: String!
  passwordConfirmation: String!
}

input FoodLogConnectionInput {
  before: String
  after: String
  first: Int
  last: Int
  day: String
}

input SaveFoodLogInput {
  day: String!
  foodLogs: [FoodLogInput!]!
}

input FoodLogInput {
  id: ID
  description: String!
  calories: Int
  fat: Int
  carbs: Int
  protein: Int
}

input DeleteFoodLogInput {
  id: ID!
}

#################
# Types         #
#################

type LogoutMutationPayload {
  expiredTokens: [String!]!
}

type LoginMutationPayload {
  token: String!
  rememberToken: String!
}

type User {
  id: ID!
  preferredName: String!
  foodLog(day: String!): FoodLogConnection!
}

type FoodLogConnection {
  pageInfo: PageInfo!
  edges: [FoodLogEdge!]!
}

type FoodLogEdge {
  cursor: String!
  node: FoodLog!
}

type FoodLog {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  description: String!
  calories: Int
  fat: Int
  carbs: Int
  protein: Int
  food: Food
}

type PageInfo {
  totalCount: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Food {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  description: String
  measurements: [Measurement!]!
}

type Measurement {
  id: ID!
  food: Food!
  createdAt: Date!
  updatedAt: Date!
  measure: String!
  amount: Int!
  calories: Int!
  fat: Int!
  carbs: Int!
  protein: Int!
}
